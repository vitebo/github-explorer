{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","styles/global.ts","services/api.ts","pages/Dashboard/styled.ts","pages/Dashboard/index.tsx","pages/Repository/styled.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","headers","Authorization","process","REACT_APP_GITHUB_AUTHORIZATION","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storageRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","Boolean","value","onChange","e","target","placeholder","type","map","to","full_name","key","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","id","rel","title","user","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.faa49d29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background-color: #F0F0F5;\n    background-image: url(${githubBackground});\n    background-repeat: no-repeat;\n    background-position: 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body,\n  input,\n  button {\n    font-size: 16px;\n    font-family: Roboto, sans-serif;\n  }\n\n  #root {\n    margin: 0 auto;\n    max-width: 960px;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n  headers: {\n    Authorization: process.env.REACT_APP_GITHUB_AUTHORIZATION,\n  },\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  color: #3a3a3a;\n  font-size: 48px;\n  line-height: 56px;\n  margin-top: 80px;\n  max-width: 450px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  display: flex;\n  margin-top: 40px;\n  max-width: 700px;\n\n  input {\n    border-bottom-width: 2px;\n    border-color: #fff;\n    border-left-width: 2px;\n    border-radius: 5px 0 0 5px;\n    border-right-width: 0;\n    border-style: solid;\n    border-top-width: 2px;\n    color: #3a3a3a;\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n\n    ${(props) =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    background-color: #04d361;\n    border-radius: 0 5px 5px 0;\n    border: none;\n    color: #fff;\n    font-weight: bold;\n    height: 70px;\n    transition: background-color 250ms;\n    width: 210px;\n\n    &:hover,\n    &:focus {\n      background-color: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  color: #c53030;\n  display: block;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    align-items: center;\n    background-color: #fff;\n    border-radius: 5px;\n    display: block;\n    display: flex;\n    padding: 24px;\n    text-decoration: none;\n    transition: transform 250ms;\n    width: 100%;\n\n    &:focus,\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    &:not(:first-child) {\n      margin-top: 16px;\n    }\n\n    img {\n      border-radius: 50%;\n      height: 64px;\n      width: 64px;\n    }\n\n    div {\n      flex: 1;\n      margin: 0 16px;\n\n      strong {\n        color: #3d3d4d;\n        font-size: 20px;\n      }\n\n      p {\n        color: #a8a8b3;\n        font-size: 18px;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      color: #cbcbd6;\n      margin-left: auto;\n    }\n  }\n`;\n","import React, { useState, FormEvent, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\n\nimport api from '../../services/api';\nimport logoImg from '../../assets/logo.svg';\nimport * as S from './styled';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storageRepositories = localStorage.getItem(\n      '@github-explorer:repositories',\n    );\n    if (storageRepositories) {\n      return JSON.parse(storageRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@github-explorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do reposit贸rio');\n      return;\n    }\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (error) {\n      setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <S.Title>Explore Reposit贸rios no Github</S.Title>\n      <S.Form onSubmit={handleAddRepository} hasError={Boolean(inputError)}>\n        <input\n          value={newRepo}\n          onChange={(e) => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </S.Form>\n      {inputError && <S.Error>{inputError}</S.Error>}\n      <S.Repositories>\n        {repositories.map((repository) => (\n          <Link\n            to={`/repositories/${repository.full_name}`}\n            key={repository.full_name}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </S.Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  a {\n    align-items: center;\n    color: #a8a8b3;\n    display: flex;\n    text-decoration: nonw;\n    transition: color 250ms;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    align-items: center;\n    display: flex;\n\n    img {\n      border-radius: 50%;\n      height: 120px;\n      width: 120px;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        color: #3d3d4d;\n        font-size: 24px;\n      }\n\n      p {\n        color: #737380;\n        font-size: 18px;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      &:not(:first-child) {\n        margin-left: 80px;\n      }\n\n      strong {\n        color: #3d3d4d;\n        display: block;\n        font-size: 36px;\n      }\n\n      span {\n        color: #6c6c80;\n        display: block;\n        margin-top: 4px;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    align-items: center;\n    background-color: #fff;\n    border-radius: 5px;\n    display: block;\n    display: flex;\n    padding: 24px;\n    text-decoration: none;\n    transition: transform 250ms;\n    width: 100%;\n\n    &:focus,\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    &:not(:first-child) {\n      margin-top: 16px;\n    }\n\n    div {\n      flex: 1;\n      margin: 0 16px;\n\n      strong {\n        color: #3d3d4d;\n        font-size: 20px;\n      }\n\n      p {\n        color: #a8a8b3;\n        font-size: 18px;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      color: #cbcbd6;\n      margin-left: auto;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\n\nimport logoImg from '../../assets/logo.svg';\nimport * as S from './styled';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  open_issues_count: number;\n  forks_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  title: string;\n  id: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then((response) => {\n      setRepository(response.data);\n    });\n    api.get(`repos/${params.repository}/issues`).then((response) => {\n      setIssues(response.data);\n    });\n  }, [params.repository]);\n\n  return (\n    <>\n      <S.Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </S.Header>\n      {repository ? (\n        <S.RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </S.RepositoryInfo>\n      ) : (\n        <p>Carregando</p>\n      )}\n      <S.Issues>\n        {issues.map((issue) => (\n          <a\n            href={issue.html_url}\n            key={issue.id}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </S.Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}